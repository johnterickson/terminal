<Project>
  <!-- Tests in build-->
  <Target Name="Test">
    <Exec 
      Condition=" $([System.String]::new($(TargetName)).ToLower().Contains('unit.test')) "
      Command="powershell $(SolutionDir)build\scripts\Run-Tests.ps1 -MatchPattern '*$(TargetName)*.dll' -Platform '$(Platform)' -Configuration '$(Configuration)' -LogPath '$(OutDir)\Logs\Tests\$(TargetName).log'"
      WorkingDirectory="$(SolutionDir)"
    />
  </Target>

  <!-- MsBuildCache -->
  <PropertyGroup>
    <!-- Off by default -->
    <MsBuildCacheEnabled Condition="'$(MsBuildCacheEnabled)' == ''">false</MsBuildCacheEnabled>

    <!-- Always off during package restore -->
    <MsBuildCacheEnabled Condition=" '$(ExcludeRestorePackageImports)' == 'true' ">false</MsBuildCacheEnabled>

    <!-- In Azure pipelines, use Pipeline Caching as the cache storage backend. Otherwise, use the local cache. -->
    <MSBuildCachePackageName Condition="'$(TF_BUILD)' != ''">Microsoft.MSBuildCache.AzurePipelines</MSBuildCachePackageName>
    <MSBuildCachePackageName Condition="'$(MSBuildCachePackageName)' == ''">Microsoft.MSBuildCache.Local</MSBuildCachePackageName>
  </PropertyGroup>

  <PropertyGroup Condition="'$(MSBuildCacheEnabled)' == 'true'">
    <!-- Change this to bust the cache -->
    <MSBuildCacheCacheUniverse Condition="'$(MSBuildCacheCacheUniverse)' == ''">202310210737</MSBuildCacheCacheUniverse>


    <!-- default cache size of 100GB is too small, so double it. -->
    <MSBuildCacheLocalCacheSizeInMegabytes>204800</MSBuildCacheLocalCacheSizeInMegabytes>

    <!-- 
      This repo writes everywhere during the build - bin, src, obj, etc. Just allowlist all of it. :(
    -->
    <MSBuildCacheIdenticalDuplicateOutputPatterns>$(MSBuildCacheIdenticalDuplicateOutputPatterns);**</MSBuildCacheIdenticalDuplicateOutputPatterns>

    <!-- version of MSBuildCache is not part of the cache key -->
    <PackagesConfigFile>$(MSBuildThisFileDirectory)\dep\nuget\packages.config</PackagesConfigFile>
    <MSBuildCacheIgnoredInputPatterns>$(MSBuildCacheIgnoredInputPatterns);$(PackagesConfigFile)</MSBuildCacheIgnoredInputPatterns>

    <!--
      Visual Studio telemetry reads various ApplicationInsights.config files and other files after the project is finished, likely in a detached process.
      This is acceptable and should not impact cache correctness.
    -->
    <MSBuildCacheAllowFileAccessAfterProjectFinishFilePatterns>
      $(MSBuildCacheAllowFileAccessAfterProjectFinishFilePatterns);
      \**\ApplicationInsights.config;
      $(LocalAppData)\Microsoft\VSApplicationInsights\**;
      $(LocalAppData)\Microsoft\Windows\INetCache\**;
    </MSBuildCacheAllowFileAccessAfterProjectFinishFilePatterns>
  </PropertyGroup>

  <PropertyGroup Condition="'$(MSBuildCacheEnabled)' == 'true' and '$(MSBuildCachePackageRoot)' == ''">
    <PackagesConfigContents>$([System.IO.File]::ReadAllText("$(PackagesConfigFile)"))</PackagesConfigContents>
    <MSBuildCachePackageVersion>$([System.Text.RegularExpressions.Regex]::Match($(PackagesConfigContents), 'Microsoft.MSBuildCache.*?version="(.*?)"').Groups[1].Value)</MSBuildCachePackageVersion>
    <MSBuildCachePackageRoot>$(MSBuildThisFileDirectory)packages\$(MSBuildCachePackageName).$(MSBuildCachePackageVersion)</MSBuildCachePackageRoot>
    <MSBuildCacheSharedCompilationPackageRoot>$(MSBuildThisFileDirectory)packages\Microsoft.MSBuildCache.SharedCompilation.$(MSBuildCachePackageVersion)</MSBuildCacheSharedCompilationPackageRoot>
  </PropertyGroup>

  <ImportGroup Condition="'$(MSBuildCacheEnabled)' == 'true'">
    <Import Project="$(MSBuildCachePackageRoot)\build\$(MSBuildCachePackageName).props" />
    <Import Project="$(MSBuildCacheSharedCompilationPackageRoot)\build\Microsoft.MSBuildCache.SharedCompilation.props" />
  </ImportGroup>
</Project>
# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

# run every hour
schedules:
- cron: 0 * * * *
  displayName: Hourly Run 
  always: true
  branches:
    include:
    - main
    
pool:
  name: 'MemoBuild-Pool'

variables:
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
  # SDL
  Codeql.Enabled: false
  runCodesignValidationInjection: false
  skipComponentGovernanceDetection: true
  skipNugetSecurityAnalysis: true
  # perf
  VSO_DEDUP_REDIRECT_TIMEOUT_IN_SEC: 5
  # for msbuildcache
  EnablePipelineCache: true
  VsDevCmd: 'C:\Program Files\Microsoft Visual Studio\2022\Preview\Common7\Tools\VsDevCmd.bat'

strategy:
  matrix:
    # # auditmode_x64-baseline:
    # #   BuildConfiguration: AuditMode
    # #   BuildPlatform: x64
    # #   AdditionalMsBuildArgs: ''
    # release_x64-baseline:
    #   BuildConfiguration: Release
    #   BuildPlatform: x64
    #   AdditionalMsBuildArgs: ''
    # release_x86-baseline:
    #   BuildConfiguration: Release
    #   BuildPlatform: x86
    #   AdditionalMsBuildArgs: ''
    # release_arm64-baseline:
    #   BuildConfiguration: Release
    #   BuildPlatform: arm64
    #   AdditionalMsBuildArgs: ''
    # # auditmode_x64-MSBuildCache:
    # #   BuildConfiguration: AuditMode
    # #   BuildPlatform: x64
    # #   AdditionalMsBuildArgs: '-graph -reportfileaccesses -p:MSBuildCacheEnabled=true -p:MSBuildCacheLogDirectory=$(Build.ArtifactStagingDirectory)\logs\MSBuildCache'
    release_x64-MSBuildCache:
      BuildConfiguration: Release
      BuildPlatform: x64
      AdditionalMsBuildArgs: '-graph -reportfileaccesses -p:MSBuildCacheEnabled=true -p:MSBuildCacheLogDirectory=$(Build.ArtifactStagingDirectory)\logs\MSBuildCache'
    # # release_x86-MSBuildCache:
    # #   BuildConfiguration: Release
    # #   BuildPlatform: x86
    # #   AdditionalMsBuildArgs: '-graph -reportfileaccesses -p:MSBuildCacheEnabled=true -p:MSBuildCacheLogDirectory=$(Build.ArtifactStagingDirectory)\logs\MSBuildCache'
    # release_arm64-MSBuildCache:
    #   BuildConfiguration: Release
    #   BuildPlatform: arm64
    #   AdditionalMsBuildArgs: '-graph -reportfileaccesses -p:MSBuildCacheEnabled=true -p:MSBuildCacheLogDirectory=$(Build.ArtifactStagingDirectory)\logs\MSBuildCache'

steps:
- powershell: |
    Get-Volume
    Get-PhysicalDisk
  displayName: 'Disk Info'

# - script: |
#     cd \
#     curl.exe https://live.sysinternals.com/handle.exe -o handle.exe
#     handle.exe /accepteula "$(Agent.RootDirectory)"
#   displayName: 'show handles to Agent.RootDirectory'

- script: set
  displayName: 'DUMP ENV VARS'

- script: |
    @echo on

    cd \

    echo SELECT VDISK FILE=%CD%ReFS.vhdx > diskpart.script.txt
    echo DETACH VDISK >> diskpart.script.txt
    diskpart /s diskpart.script.txt
    del %CD%ReFS.vhdx

    echo CREATE VDISK FILE=%CD%ReFS.vhdx MAXIMUM=250000 TYPE=EXPANDABLE > diskpart.script.txt
    echo SELECT VDISK FILE=%CD%ReFS.vhdx >> diskpart.script.txt
    echo ATTACH VDISK >> diskpart.script.txt
    echo CREATE PARTITION PRIMARY >> diskpart.script.txt
    echo FORMAT FS=REFS QUICK >> diskpart.script.txt
    echo ASSIGN LETTER=R >> diskpart.script.txt
    type diskpart.script.txt
    diskpart /s diskpart.script.txt

    format R: /fs:ReFS /Q /X /Y


    dir /s /b "%AGENT_BUILDDIRECTORY%\*"
    mkdir "R:\%AGENT_BUILDDIRECTORY:~3%"
    robocopy /MOVE /E /R:0 /COPYALL "%AGENT_BUILDDIRECTORY%" "R:\%AGENT_BUILDDIRECTORY:~3%" *
    dir /s /b "%AGENT_BUILDDIRECTORY%\*"

    IF EXIST "%AGENT_BUILDDIRECTORY%.old" ( rmdir /s /q "%AGENT_BUILDDIRECTORY%.old" )
    IF EXIST "%AGENT_BUILDDIRECTORY%" (
      rmdir /s /q "%AGENT_BUILDDIRECTORY%" || move "%AGENT_BUILDDIRECTORY%" "%AGENT_BUILDDIRECTORY%.old"
    )

    mklink /J "%AGENT_BUILDDIRECTORY%" "R:\%AGENT_BUILDDIRECTORY:~3%"

    IF EXIST "\MSBuildCache.old" ( rmdir /s /q "\MSBuildCache.old" )
    IF EXIST "\MSBuildCache" (
      rmdir /s /q "\MSBuildCache" || move "\MSBuildCache" "\MSBuildCache.old"
    )

    mkdir "R:\MSBuildCache"
    mklink /J "\MSBuildCache" "R:\MSBuildCache"

    mkdir R:\TEMP
    setx TEMP R:\TEMP
    echo "##vso[task.setvariable variable=TEMP;]R:\TEMP"

- powershell: |
    Get-Volume
    Get-PhysicalDisk
  displayName: 'Disk Info'

- script: |
    dotnet nuget locals all -l

- checkout: self
  submodules: recursive

# set up env (vs preview)
- script: |
   cd %TEMP%
   del vs_enterprise.exe
   
   curl.exe -L https://aka.ms/vs/17/pre/vs_enterprise.exe -o vs_enterprise.exe
   
   vs_enterprise.exe --passive --norestart --wait --config %CD%\.vsconfig
   set VS_ERRORLEVEL=%ERRORLEVEL%
   del vs_enterprise.exe
   
   IF "%VS_ERRORLEVEL%"=="0" (
     echo install success: %VS_ERRORLEVEL%
     exit /b 0
   )
   IF "%VS_ERRORLEVEL%"=="3010" (
     echo install success: %VS_ERRORLEVEL%
     exit /b 0
   )

   echo install fail: %VS_ERRORLEVEL%

   CALL "$(VsDevCmd)"
   msbuild --version
  displayName: 'Install VS Preview'

- template: .\build\pipelines\templates-v2\steps-restore-nuget.yml

- task: VSBuild@1
  displayName: Build OpenConsole.sln
  inputs:
    solution: 'OpenConsole.sln'
    msbuildArgs: >-
      /p:WindowsTerminalOfficialBuild=true;WindowsTerminalBranding=Dev;PGOBuildMode=None
      /bl:$(Build.ArtifactStagingDirectory)\logs\msbuild.binlog
      /ds:false
      $(AdditionalMsBuildArgs)
    platform: $(BuildPlatform)
    configuration: $(BuildConfiguration)
    msbuildArchitecture: x64
    maximumCpuCount: true
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)

- publish: $(Build.ArtifactStagingDirectory)\logs
  displayName: Publish Logs
  artifact: '$(System.JobDisplayName) logs'
  condition: always()

- script: dir \
  displayName: 'dir volume root of agent'